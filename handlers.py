from aiogram import types, F, Router
from aiogram import Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from database import cursor, conn
from keyboards import get_main_menu_keyboard, get_return_to_main_menu_keyboard, get_choose_test_keyboard, get_confirmation_keyboard
from gigachat_api import generate_attention_test
import logging
from states import FeedbackStates, NotificationStates
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    waiting_for_name = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
class TestStates(StatesGroup):
    waiting_for_answer = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user is None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(Registration.waiting_for_name)
    else:
        await show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Å –∏–º–µ–Ω–µ–º {name}.")

    cursor.execute('INSERT INTO users (user_id, name) VALUES (?, ?)', (user_id, name))
    conn.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    await show_main_menu(message)
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: types.Message | CallbackQuery):
    keyboard = get_main_menu_keyboard()

    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'

    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

async def start_choosen_test(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ç–µ—Å—Ç.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    action, test_type = callback.data.split(":")
    logger.info(f"–¢–∏–ø —Ç–µ—Å—Ç–∞: {test_type}")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if test_type == "word_count":
            question, correct_answer = generate_attention_test("–ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–≤–∞")
        elif test_type == "letter_count":
            question, correct_answer = generate_attention_test("–ø–æ—Å—á–∏—Ç–∞—Ç—å –±—É–∫–≤—ã")
        elif test_type == "extra_word":
            question, correct_answer = generate_attention_test("–Ω–∞–π—Ç–∏ –ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ")
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(correct_answer=correct_answer)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
        task_text = f"–ó–∞–¥–∞–Ω–∏–µ: {question}\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É."
        await callback.message.answer(task_text)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(TestStates.waiting_for_answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await show_main_menu(callback)
        await state.clear()

async def check_test_answer(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    user_id = message.from_user.id
    user_answer = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç: {user_answer}.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    correct_answer = data.get("correct_answer")
    test_types = data.get("test_types", [])
    current_test_index = data.get("current_test_index", 0)
    correct_answers_count = data.get("correct_answers_count", 0)  # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_type = test_types[current_test_index] if test_types else "single_test"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        if user_answer.strip() == correct_answer.strip():
            result = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ"
            correct_answers_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        else:
            result = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        result = "–û—à–∏–±–∫–∞"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    INSERT INTO test_history (user_id, test_type, result)
    VALUES (?, ?, ?)
    ''', (user_id, test_type, result))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞
    await state.update_data(correct_answers_count=correct_answers_count)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    if test_types:  # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        await state.update_data(current_test_index=current_test_index + 1)
        await send_next_test(message, state)
    else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç
        await show_main_menu(message)
        await state.clear()

async def start_complex_test(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.")

    # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
    test_types = ["word_count", "letter_count", "extra_word"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(test_types=test_types, current_test_index=0)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç
    await send_next_test(callback, state)

async def send_next_test(update: types.Message | types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    test_types = data.get("test_types", [])
    current_test_index = data.get("current_test_index", 0)
    correct_answers_count = data.get("correct_answers_count", 0)  # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    if current_test_index >= len(test_types):
        user_id = update.from_user.id
        total_tests = len(test_types)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
        INSERT OR REPLACE INTO test_statistics (user_id, total_tests, correct_answers)
        VALUES (?, COALESCE((SELECT total_tests FROM test_statistics WHERE user_id = ?), 0) + ?,
                      COALESCE((SELECT correct_answers FROM test_statistics WHERE user_id = ?), 0) + ?)
        ''', (user_id, user_id, total_tests, user_id, correct_answers_count))
        conn.commit()

        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
        if isinstance(update, types.CallbackQuery):
            await update.message.answer("üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            await show_main_menu(update)
        else:
            await update.answer("üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            await show_main_menu(update)
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Ç–µ—Å—Ç–∞
    test_type = test_types[current_test_index]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.from_user.id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç: {test_type}")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if test_type == "word_count":
            question, correct_answer = generate_attention_test("–ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–≤–∞")
        elif test_type == "letter_count":
            question, correct_answer = generate_attention_test("–ø–æ—Å—á–∏—Ç–∞—Ç—å –±—É–∫–≤—ã")
        elif test_type == "extra_word":
            question, correct_answer = generate_attention_test("–Ω–∞–π—Ç–∏ –ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ")
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(correct_answer=correct_answer)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
        task_text = f"–ó–∞–¥–∞–Ω–∏–µ: {question}\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É."
        if isinstance(update, types.CallbackQuery):
            await update.message.answer(task_text)
        else:
            await update.answer(task_text)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(TestStates.waiting_for_answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        if isinstance(update, types.CallbackQuery):
            await update.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await show_main_menu(update)
        else:
            await update.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await show_main_menu(update)
        await state.clear()

async def go_to_new_keyboard(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ –≤—ã–±–æ—Ä—É" –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    new_keyboard = get_choose_test_keyboard()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)

async def show_test_history(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤.")

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    SELECT test_type, result, timestamp FROM test_history
    WHERE user_id = ?
    ORDER BY timestamp DESC
    ''', (user_id,))
    history = cursor.fetchall()

    if not history:
        await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤:\n\n"
    for entry in history:
        test_type, result, timestamp = entry
        history_text += f"üìÖ {timestamp}\n"
        history_text += f"üîç –¢–∏–ø —Ç–µ—Å—Ç–∞: {test_type}\n"
        history_text += f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n"

    await callback.message.answer(history_text)

async def show_statistics(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    SELECT total_tests, correct_answers FROM test_statistics
    WHERE user_id = ?
    ''', (user_id,))
    stats = cursor.fetchone()

    if not stats:
        await callback.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç.")
        return

    total_tests, correct_answers = stats

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üìÖ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers / total_tests * 100:.2f}%"
    )

    await callback.message.answer(stats_text)

async def delete_history(callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏.")

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
    cursor.execute('DELETE FROM test_history WHERE user_id = ?', (user_id,))
    conn.commit()

    await callback.message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    await show_main_menu(callback)

async def delete_statistics(callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute('DELETE FROM test_statistics WHERE user_id = ?', (user_id,))
    conn.commit()

    await callback.message.answer("üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    await show_main_menu(callback)

async def confirm_delete(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    action = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (history –∏–ª–∏ statistics)

    if action == "history":
        await delete_history(callback)
    elif action == "statistics":
        await delete_statistics(callback)

async def cancel_delete(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(callback)

async def request_delete_history(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.
    """
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤?",
        reply_markup=get_confirmation_keyboard("history")
    )

async def request_delete_statistics(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?",
        reply_markup=get_confirmation_keyboard("statistics")
    )

async def save_feedback(user_id: int, feedback_text: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cursor.execute('SELECT name FROM users WHERE user_id = ?', (user_id,))
    user_name = cursor.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
    INSERT INTO feedback (user_id, user_name, feedback_text)
    VALUES (?, ?, ?)
    ''', (user_id, user_name, feedback_text))
    conn.commit()

async def request_feedback(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackStates.waiting_for_feedback)

async def process_feedback(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = message.from_user.id
    feedback_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_feedback(user_id, feedback_text)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await show_main_menu(message)
    await state.clear()

router = Router()

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_to_main_menu(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message)

logger = logging.getLogger(__name__)

async def subscribe_notifications(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    INSERT OR REPLACE INTO notifications (user_id, subscribed)
    VALUES (?, ?)
    ''', (user_id, True))
    conn.commit()

    await callback.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    await state.set_state(NotificationStates.subscribed)
    await show_main_menu(callback)

async def send_daily_notifications(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT user_id FROM notifications WHERE subscribed = ?', (True,))
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(user_id, "‚è∞ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def register_handlers(dp):
    dp.callback_query.register(start_choosen_test, F.data.startswith("test_type:"))
    dp.callback_query.register(go_to_new_keyboard, F.data == "training_with_tasks")
    dp.callback_query.register(start_complex_test, F.data == "complex_test")
    dp.callback_query.register(show_test_history, F.data == "tests_history")
    dp.callback_query.register(show_statistics, F.data == "tests_statistics")
    dp.callback_query.register(request_delete_history, F.data == "delete_history")
    dp.callback_query.register(request_delete_statistics, F.data == "delete_statistics")
    dp.callback_query.register(confirm_delete, F.data.startswith("confirm_"))
    dp.callback_query.register(cancel_delete, F.data == "cancel_delete")
    dp.callback_query.register(request_feedback, F.data == "leave_feedback")
    dp.callback_query.register(subscribe_notifications, F.data == "subscribe_notifications")
    dp.message.register(check_test_answer, TestStates.waiting_for_answer)
    dp.message.register(process_feedback, FeedbackStates.waiting_for_feedback)